[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "varunayan"
version = "0.1.0"
description = "Analysis-ready climate data downloader and processor for custom regions"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    { name = "Atharva Jagtap", email = "atharvajagtap1108@gmail.com" },
    { name = "Saket Choudhary", email = "saketc@iitb.ac.in" }
]
maintainers = [
    { name = "Atharva Jagtap", email = "atharvajagtap1108@gmail.com" },
    { name = "Saket Choudhary", email = "saketc@iitb.ac.in" }
]
keywords = ["climate", "era5", "weather", "atmospheric-science", "geospatial", "netcdf"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: GIS",
    "Operating System :: OS Independent",
]
dependencies = [
    "cdsapi>=0.5.1",
    "xarray>=0.20.0",
    "netCDF4>=1.5.0",
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "geopandas>=0.10.0",
    "shapely>=1.8.0",
    "python-dateutil>=2.8.0",
    "matplotlib>=3.3.0",
    "tqdm>=4.60.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "black>=22.0",
    "isort>=5.10",
    "mypy>=0.910",
    "flake8>=4.0",
    "pre-commit>=2.15",
]
docs = [
    # Core Sphinx dependencies
    "sphinx>=4.0",
    "sphinx-book-theme>=1.0.0",
    "sphinx-autoapi>=2.0",
    
    # Markdown and content processing
    "myst-parser>=0.15",
    "docutils>=0.17",
    
    # Notebook processing
    "jupyter>=1.0",
    "nbconvert>=6.0",
    "ipython>=7.0",
    "myst-nb>=0.13.0",
    
    # Modern Sphinx extensions
    "sphinx-copybutton>=0.5.0",
    "sphinx-design>=0.3.0",
    "sphinx-togglebutton>=0.3.0",
    
    # Enhanced search and navigation
    "sphinx-tabs>=3.0.0",
    
    # Documentation testing and validation
    "linkify-it-py>=2.0",
    "markdown-it-py>=2.0",
    "mdit-py-plugins>=0.3.0",
]
docs-build = [
    # Minimal dependencies for CI/CD documentation building
    "sphinx>=4.0",
    "sphinx-book-theme>=1.0.0",
    "sphinx-autoapi>=2.0",
    "myst-parser>=0.15",
    "myst-nb>=0.13.0",
    "jupyter>=1.0",
    "nbconvert>=6.0",
    "docutils>=0.17",
    "sphinx-copybutton>=0.5.0",
    "sphinx-design>=0.3.0",
    "sphinx-togglebutton>=0.3.0",
    "sphinx-tabs>=3.0.0",
    "linkify-it-py>=2.0",
    "markdown-it-py>=2.0",
    "mdit-py-plugins>=0.3.0",
]
docs-serve = [
    # Additional dependencies for local documentation serving
    "sphinx-autobuild>=2021.3.14",
    "livereload>=2.6.3",
    "watchdog>=2.1.0",
]
build = [
    # Dependencies for building distribution packages
    "build>=0.7.0",
    "twine>=4.0.0",
    "wheel>=0.37.0",
    "setuptools>=60.0.0",
    "check-manifest>=0.48",
]
test = [
    # Extended testing dependencies
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "pytest-xdist>=2.5.0",
    "pytest-mock>=3.6.1",
    "pytest-timeout>=2.1.0",
    "coverage[toml]>=6.0",
    "tox>=3.24.0",
]
quality = [
    # Code quality and formatting
    "black>=22.0",
    "isort>=5.10",
    "flake8>=4.0",
    "mypy>=0.910",
    "pre-commit>=2.15",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pylint>=2.12.0",
]
all = ["varunayan[dev,docs,docs-serve,build,test,quality]"]

[project.scripts]
varunayan = "varunayan.cli:main"

[project.urls]
Homepage = "https://github.com/saketlab/varunayan"
Documentation = "https://github.com/saketlab/varunayan#readme"
Repository = "https://github.com/saketlab/varunayan"
Issues = "https://github.com/saketlab/varunayan/issues"

[tool.hatch.version]
path = "varunayan/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["varunayan"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/scripts",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q --cov=varunayan --cov-report=term-missing"
minversion = "6.0"

[tool.coverage.run]
source = ["varunayan"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["varunayan"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cdsapi.*",
    "geopandas.*",
    "shapely.*",
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503", "E501"]