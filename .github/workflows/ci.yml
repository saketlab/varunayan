name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: "3.9"
          - python-version: "3.10"
          - python-version: "3.11"
          - python-version: "3.12"
          - python-version: "3.13"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prerelease: ${{ matrix.allow-prerelease || false }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 varunayan/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 varunayan/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        mypy varunayan/

    - name: Test with pytest
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true  # Allow tests to fail until test suite is implemented

    - name: Test CLI functionality
      run: |
        python -m varunayan --help
        python -c "import varunayan; print('Package imports successfully')"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]

    - name: Run security scan
      run: |
        bandit -r varunayan/ -f json -o bandit-report.json || true
        bandit -r varunayan/ --severity-level medium

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  notebooks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-notebooks-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-notebooks-
          ${{ runner.os }}-pip-

    - name: Install dependencies with notebook support
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,notebooks]"
        pip install nbconvert

    - name: Configure CDS API credentials
      env:
        CDS_API_KEY: ${{ secrets.CDS_API_KEY }}
      run: |
        if [ -z "$CDS_API_KEY" ]; then
          echo "CDS_API_KEY secret is not set" >&2
          exit 1
        fi
        cat <<'EOF' > ~/.cdsapirc
        url: https://cds.climate.copernicus.eu/api
        key: ${CDS_API_KEY}
        EOF

    - name: Execute notebooks
      run: |
        cd docs/tutorials
        for notebook in *.ipynb; do
          echo "Executing $notebook..."
          jupyter nbconvert --to notebook --execute --inplace "$notebook" --ExecutePreprocessor.timeout=300
        done

    - name: Check for notebook execution errors
      run: |
        cd docs/tutorials
        cat > check_notebook.py << 'EOF'
        import json
        import sys
        import os
        
        for notebook in os.listdir('.'):
            if not notebook.endswith('.ipynb'):
                continue
            print(f"Checking {notebook} for errors...")
            with open(notebook, 'r') as f:
                nb = json.load(f)
                for cell in nb.get('cells', []):
                    if cell.get('cell_type') == 'code':
                        for output in cell.get('outputs', []):
                            if output.get('output_type') == 'error':
                                print(f'Error in {notebook}: {output.get("ename", "Unknown")}')
                                sys.exit(1)
            print(f'{notebook} executed successfully')
        EOF
        python check_notebook.py

    - name: Upload executed notebooks
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: executed-notebooks
        path: docs/tutorials/*.ipynb
